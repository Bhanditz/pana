{
 "sdkVersion": "Dart VM version: 1.24.0-dev.5.0 (Fri May 19 08:42:29 2017) on \"linux_x64\"",
 "packageName": "dart_dev",
 "packageVersion": "1.7.5",
 "dartFiles": [
  "bin/dart_dev.dart",
  "lib/api.dart",
  "lib/dart_dev.dart",
  "lib/src/dart_dev_cli.dart",
  "lib/src/platform_util/api.dart",
  "lib/src/platform_util/mock_platform_util.dart",
  "lib/src/platform_util/platform_util.dart",
  "lib/src/platform_util/standard_platform_util.dart",
  "lib/src/reporter.dart",
  "lib/src/sauce_test_harness_transformer.dart",
  "lib/src/task_process.dart",
  "lib/src/tasks/analyze/api.dart",
  "lib/src/tasks/analyze/cli.dart",
  "lib/src/tasks/analyze/config.dart",
  "lib/src/tasks/bash_completion/api.dart",
  "lib/src/tasks/bash_completion/cli.dart",
  "lib/src/tasks/bash_completion/config.dart",
  "lib/src/tasks/cli.dart",
  "lib/src/tasks/config.dart",
  "lib/src/tasks/copy_license/api.dart",
  "lib/src/tasks/copy_license/cli.dart",
  "lib/src/tasks/copy_license/config.dart",
  "lib/src/tasks/coverage/api.dart",
  "lib/src/tasks/coverage/cli.dart",
  "lib/src/tasks/coverage/config.dart",
  "lib/src/tasks/coverage/exceptions.dart",
  "lib/src/tasks/docs/api.dart",
  "lib/src/tasks/docs/cli.dart",
  "lib/src/tasks/docs/config.dart",
  "lib/src/tasks/examples/api.dart",
  "lib/src/tasks/examples/cli.dart",
  "lib/src/tasks/examples/config.dart",
  "lib/src/tasks/format/api.dart",
  "lib/src/tasks/format/cli.dart",
  "lib/src/tasks/format/config.dart",
  "lib/src/tasks/gen_test_runner/api.dart",
  "lib/src/tasks/gen_test_runner/cli.dart",
  "lib/src/tasks/gen_test_runner/config.dart",
  "lib/src/tasks/init/api.dart",
  "lib/src/tasks/init/cli.dart",
  "lib/src/tasks/init/config.dart",
  "lib/src/tasks/local/api.dart",
  "lib/src/tasks/local/cli.dart",
  "lib/src/tasks/local/config.dart",
  "lib/src/tasks/saucelabs/api.dart",
  "lib/src/tasks/saucelabs/cli.dart",
  "lib/src/tasks/saucelabs/config.dart",
  "lib/src/tasks/saucelabs/platforms.dart",
  "lib/src/tasks/saucelabs/sauce_api.dart",
  "lib/src/tasks/saucelabs/sauce_iframe_runner/sauce_iframe_runner.dart",
  "lib/src/tasks/saucelabs/sauce_runner.dart",
  "lib/src/tasks/saucelabs/sauce_unit_test_driver.dart",
  "lib/src/tasks/saucelabs/xml_reporter.dart",
  "lib/src/tasks/serve/api.dart",
  "lib/src/tasks/task.dart",
  "lib/src/tasks/task_runner/api.dart",
  "lib/src/tasks/task_runner/cli.dart",
  "lib/src/tasks/task_runner/config.dart",
  "lib/src/tasks/test/api.dart",
  "lib/src/tasks/test/cli.dart",
  "lib/src/tasks/test/config.dart",
  "lib/src/tools/selenium.dart",
  "lib/src/util.dart",
  "lib/src/version.dart",
  "lib/util.dart",
  "test/integration/analyze_test.dart",
  "test/integration/copy_license_test.dart",
  "test/integration/coverage_test.dart",
  "test/integration/docs_test.dart",
  "test/integration/examples_test.dart",
  "test/integration/format_test.dart",
  "test/integration/gen_test_runner_test.dart",
  "test/integration/generated_runner.dart",
  "test/integration/init_test.dart",
  "test/integration/local_test.dart",
  "test/integration/task_runner_test.dart",
  "test/integration/test_test.dart",
  "test_fixtures/analyze/errors/lib/errors.dart",
  "test_fixtures/analyze/hints/lib/hints.dart",
  "test_fixtures/analyze/lints/lib/lints.dart",
  "test_fixtures/analyze/no_issues/bin/executable.dart",
  "test_fixtures/analyze/no_issues/lib/no_issues.dart",
  "test_fixtures/analyze/no_issues/tool/dev.dart",
  "test_fixtures/analyze/strong/lib/strong.dart",
  "test_fixtures/analyze/warnings/lib/warnings.dart",
  "test_fixtures/copy_license/has_licenses/example/main.dart",
  "test_fixtures/copy_license/has_licenses/tool/dev.dart",
  "test_fixtures/copy_license/license_with_empty_lines/lib/main.dart",
  "test_fixtures/copy_license/no_licenses/lib/main.dart",
  "test_fixtures/coverage/browser/lib/coverage_browser.dart",
  "test_fixtures/coverage/browser/test/browser_custom_test.dart",
  "test_fixtures/coverage/browser/test/browser_test.dart",
  "test_fixtures/coverage/browser/tool/dev.dart",
  "test_fixtures/coverage/browser_needs_pub_serve/lib/coverage_browser.dart",
  "test_fixtures/coverage/browser_needs_pub_serve/lib/transformer.dart",
  "test_fixtures/coverage/browser_needs_pub_serve/test/browser_custom_test.dart",
  "test_fixtures/coverage/browser_needs_pub_serve/test/browser_test.dart",
  "test_fixtures/coverage/browser_needs_pub_serve/tool/dev.dart",
  "test_fixtures/coverage/failing_test/lib/coverage_failing_test.dart",
  "test_fixtures/coverage/failing_test/test/failing_test.dart",
  "test_fixtures/coverage/failing_test/test/passing_test.dart",
  "test_fixtures/coverage/failing_test/tool/dev.dart",
  "test_fixtures/coverage/functional_test/lib/lib.dart",
  "test_fixtures/coverage/functional_test/test/functional/simple_test.dart",
  "test_fixtures/coverage/functional_test/tool/dev.dart",
  "test_fixtures/coverage/functional_test/web/index.dart",
  "test_fixtures/coverage/non_test_file/lib/non_test_file.dart",
  "test_fixtures/coverage/non_test_file/test/file.dart",
  "test_fixtures/coverage/non_test_file/tool/dev.dart",
  "test_fixtures/coverage/vm/lib/coverage_vm.dart",
  "test_fixtures/coverage/vm/test/vm_test.dart",
  "test_fixtures/docs/docs/lib/main.dart",
  "test_fixtures/format/changes_needed/lib/main.dart",
  "test_fixtures/format/exclusions/lib/.pub/main.dart",
  "test_fixtures/format/exclusions/lib/clean.dart",
  "test_fixtures/format/exclusions/lib/main.dart",
  "test_fixtures/format/exclusions/tool/dev.dart",
  "test_fixtures/format/no_changes_needed/bin/executable.dart",
  "test_fixtures/format/no_changes_needed/lib/main.dart",
  "test_fixtures/format/no_changes_needed/tool/dev.dart",
  "test_fixtures/gen_test_runner/browser_and_vm/test/browser/browser_test.dart",
  "test_fixtures/gen_test_runner/browser_and_vm/test/vm/vm_test.dart",
  "test_fixtures/gen_test_runner/browser_and_vm/tool/dev.dart",
  "test_fixtures/gen_test_runner/check_fail/test/browser_test.dart",
  "test_fixtures/gen_test_runner/check_fail/test/generated_runner.dart",
  "test_fixtures/gen_test_runner/check_fail/tool/dev.dart",
  "test_fixtures/gen_test_runner/check_pass/test/browser_test.dart",
  "test_fixtures/gen_test_runner/check_pass/test/generated_runner.dart",
  "test_fixtures/gen_test_runner/check_pass/tool/dev.dart",
  "test_fixtures/gen_test_runner/default_config/test/browser_test.dart",
  "test_fixtures/gen_test_runner/default_config/tool/dev.dart",
  "test_fixtures/init/initialized/tool/dev.dart",
  "test_fixtures/local/follow_symlinks/tool/dev.dart",
  "test_fixtures/local/follow_symlinks/tool/tasks/exampleTask_task.dart",
  "test_fixtures/local/good_tasks/tool/dev.dart",
  "test_fixtures/local/good_tasks/tool/exampleTask_task.dart",
  "test_fixtures/local/no_executable/tool/dev.dart",
  "test_fixtures/local/no_follow_symlinks/tool/dev.dart",
  "test_fixtures/local/no_follow_symlinks/tool/tasks/exampleTask_task.dart",
  "test_fixtures/local/no_tasks/tool/dev.dart",
  "test_fixtures/local/tasks/exampleTask_task.dart",
  "test_fixtures/task_runner/failing_tasks/lib/main.dart",
  "test_fixtures/task_runner/failing_tasks/test/simple_test.dart",
  "test_fixtures/task_runner/failing_tasks/tool/dev.dart",
  "test_fixtures/task_runner/passing_tasks/lib/main.dart",
  "test_fixtures/task_runner/passing_tasks/test/simple_test.dart",
  "test_fixtures/task_runner/passing_tasks/tool/dev.dart",
  "test_fixtures/test/default_unit/lib/passing_unit.dart",
  "test_fixtures/test/default_unit/test/unit_test.dart",
  "test_fixtures/test/default_unit/tool/dev.dart",
  "test_fixtures/test/failing/test/failing_integration_test.dart",
  "test_fixtures/test/failing/test/failing_unit_test.dart",
  "test_fixtures/test/failing/tool/dev.dart",
  "test_fixtures/test/needs_pub_serve/lib/transformer.dart",
  "test_fixtures/test/needs_pub_serve/test/unit_test.dart",
  "test_fixtures/test/needs_pub_serve/tool/dev.dart",
  "test_fixtures/test/passing/test/passing_integration_test.dart",
  "test_fixtures/test/passing/test/passing_unit_test.dart",
  "test_fixtures/test/passing/tool/dev.dart",
  "test_fixtures/test/passingIntegration/test/failing_unit_test.dart",
  "test_fixtures/test/passingIntegration/test/passing_integration_test.dart",
  "test_fixtures/test/passingIntegration/tool/dev.dart",
  "tool/dev.dart",
  "tool/tasks/hello_task.dart"
 ],
 "pubSummary": {
  "packages": {
   "analyzer": "0.29.11",
   "ansicolor": "0.0.9",
   "archive": "1.0.29",
   "args": "0.13.7",
   "async": "1.13.3",
   "barback": "0.15.2+11",
   "boolean_selector": "1.0.2",
   "bot": "0.28.0",
   "browser": "0.10.0+2",
   "charcode": "1.1.1",
   "cli_util": "0.0.1+2",
   "collection": "1.14.1",
   "completion": "0.1.6",
   "convert": "2.0.1",
   "coverage": "0.7.9",
   "crypto": "2.0.1",
   "csslib": "0.13.7+1",
   "dart_style": "1.0.4",
   "dartdoc": "0.9.13",
   "fluri": "1.2.1",
   "glob": "1.1.3",
   "html": "0.13.1",
   "http": "0.11.3+13",
   "http_multi_server": "2.0.3",
   "http_parser": "3.1.1",
   "isolate": "1.0.0",
   "json_rpc_2": "2.0.4",
   "logging": "0.11.3+1",
   "markdown": "0.11.3",
   "matcher": "0.12.1+1",
   "meta": "1.0.5",
   "mime": "0.9.3",
   "mustache4dart": "1.1.0",
   "package_config": "1.0.1",
   "package_resolver": "1.0.2",
   "path": "1.4.1",
   "petitparser": "1.5.4",
   "platform_detect": "1.3.2",
   "plugin": "0.2.0",
   "pool": "1.3.1",
   "pub_semver": "1.3.2",
   "quiver": "0.24.0",
   "rate_limit": "0.1.0",
   "resource": "2.1.2",
   "sass": "0.4.2+7",
   "shelf": "0.6.7+2",
   "shelf_packages_handler": "1.0.0",
   "shelf_static": "0.2.4",
   "shelf_web_socket": "0.2.1",
   "source_map_stack_trace": "1.1.4",
   "source_maps": "0.10.4",
   "source_span": "1.4.0",
   "stack_trace": "1.7.3",
   "stream_channel": "1.6.1",
   "string_scanner": "1.0.2",
   "term_glyph": "1.0.0",
   "test": "0.12.20+13",
   "typed_data": "1.1.3",
   "unittest": "0.11.7",
   "utf": "0.9.0+3",
   "uuid": "0.5.3",
   "vm_service_client": "0.2.3",
   "watcher": "0.9.7+3",
   "web_socket_channel": "1.0.4",
   "webdriver": "1.2.3",
   "when": "0.2.0",
   "which": "0.1.3",
   "xml": "2.5.0",
   "yaml": "2.1.12"
  },
  "availablePackages": {
   "analyzer": "0.30.0+2",
   "cli_util": "0.1.1",
   "coverage": "0.9.2",
   "dart_style": "1.0.6",
   "dartdoc": "0.12.0",
   "quiver": "0.25.0",
   "sass": "1.0.0-alpha.9",
   "unittest": "0.12.4+1"
  },
  "pubspecContent": {
   "authors": [
    "Workiva Client Platform Team <clientplatform@workiva.com>",
    "Dustin Lessard <dustin.lessard@workiva.com>",
    "Evan Weible <evan.weible@workiva.com>",
    "Jay Udey <jay.udey@workiva.com>",
    "Max Peterson <maxwell.peterson@workiva.com>",
    "Trent Grover <trent.grover@workiva.com>"
   ],
   "dependencies": {
    "ansicolor": "^0.0.9",
    "args": "^0.13.0",
    "browser": ">=0.10.0 <0.11.0",
    "completion": "^0.1.5",
    "coverage": "^0.7.3",
    "dart_style": ">=0.2.4 <2.0.0",
    "dartdoc": "^0.9.0",
    "fluri": "^1.1.1",
    "path": "^1.3.6",
    "platform_detect": "^1.3.2",
    "rate_limit": "^0.1.0",
    "resource": ">=1.0.0 <3.0.0",
    "sass": "^0.4.2",
    "test": "^0.12.0",
    "uuid": "^0.5.0",
    "webdriver": "^1.0.0",
    "xml": "^2.4.2",
    "yaml": "^2.1.0"
   },
   "description": "Centralized tooling for Dart projects. Consistent interface across projects. Easily configurable.",
   "environment": {
    "sdk": ">=1.9.0 <2.0.0"
   },
   "executables": {
    "dart_dev": null
   },
   "homepage": "https://github.com/Workiva/dart_dev",
   "name": "dart_dev",
   "transformers": [
    {
     "test/pub_serve": {
      "$include": "test/**_test{.*,}.dart"
     }
    },
    {
     "dart_dev/src/sauce_test_harness_transformer": {
      "$include": [
       "test/**_test{.*,}.dart",
       "test/**_test{.*,}.html"
      ]
     }
    }
   ],
   "version": "1.7.5"
  }
 },
 "analyzerItems": [
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE",
   "file": "lib/src/tasks/analyze/api.dart",
   "line": 85,
   "col": 3,
   "error": "Invalid override. The type of 'AnalyzeTask.done' ('() → Future<dynamic>') isn't a subtype of 'Task.done' ('() → Future<TaskResult>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE",
   "file": "lib/src/tasks/bash_completion/api.dart",
   "line": 40,
   "col": 3,
   "error": "Invalid override. The type of 'BashCompletionTask.done' ('() → Future<dynamic>') isn't a subtype of 'Task.done' ('() → Future<TaskResult>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE",
   "file": "lib/src/tasks/copy_license/api.dart",
   "line": 129,
   "col": 3,
   "error": "Invalid override. The type of 'CopyLicenseTask.done' ('() → Future<dynamic>') isn't a subtype of 'Task.done' ('() → Future<TaskResult>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_SUPER_INVOCATION",
   "file": "lib/src/tasks/coverage/api.dart",
   "line": 46,
   "col": 9,
   "error": "super call must be last in an initializer list (see https://goo.gl/EY6hDP): 'super.fail()'."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_SUPER_INVOCATION",
   "file": "lib/src/tasks/coverage/api.dart",
   "line": 55,
   "col": 9,
   "error": "super call must be last in an initializer list (see https://goo.gl/EY6hDP): 'super.success()'."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_SUPER_INVOCATION",
   "file": "lib/src/tasks/docs/api.dart",
   "line": 29,
   "col": 9,
   "error": "super call must be last in an initializer list (see https://goo.gl/EY6hDP): 'super.success()'."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE",
   "file": "lib/src/tasks/examples/api.dart",
   "line": 68,
   "col": 3,
   "error": "Invalid override. The type of 'ExamplesTask.done' ('() → Future<dynamic>') isn't a subtype of 'Task.done' ('() → Future<TaskResult>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE",
   "file": "lib/src/tasks/format/api.dart",
   "line": 128,
   "col": 3,
   "error": "Invalid override. The type of 'FormatTask.done' ('() → Future<dynamic>') isn't a subtype of 'Task.done' ('() → Future<TaskResult>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE",
   "file": "lib/src/tasks/gen_test_runner/api.dart",
   "line": 165,
   "col": 3,
   "error": "Invalid override. The type of 'GenTestRunnerTask.done' ('() → Future<dynamic>') isn't a subtype of 'Task.done' ('() → Future<TaskResult>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE",
   "file": "lib/src/tasks/init/api.dart",
   "line": 61,
   "col": 3,
   "error": "Invalid override. The type of 'InitTask.done' ('() → Future<dynamic>') isn't a subtype of 'Task.done' ('() → Future<TaskResult>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE",
   "file": "lib/src/tasks/local/api.dart",
   "line": 41,
   "col": 3,
   "error": "Invalid override. The type of 'LocalTask.done' ('() → Future<dynamic>') isn't a subtype of 'Task.done' ('() → Future<TaskResult>')."
  },
  {
   "type": "ERROR|STATIC_WARNING|ARGUMENT_TYPE_NOT_ASSIGNABLE",
   "file": "lib/src/tasks/saucelabs/sauce_iframe_runner/sauce_iframe_runner.dart",
   "line": 291,
   "col": 18,
   "error": "The argument type 'Debouncer' can't be assigned to the parameter type 'StreamTransformer<String, dynamic>'."
  },
  {
   "type": "ERROR|STATIC_WARNING|MAP_VALUE_TYPE_NOT_ASSIGNABLE",
   "file": "lib/src/tasks/saucelabs/xml_reporter.dart",
   "line": 25,
   "col": 23,
   "error": "The element type 'int' can't be assigned to the map value type 'String'."
  },
  {
   "type": "ERROR|STATIC_WARNING|MAP_VALUE_TYPE_NOT_ASSIGNABLE",
   "file": "lib/src/tasks/saucelabs/xml_reporter.dart",
   "line": 26,
   "col": 22,
   "error": "The element type 'int' can't be assigned to the map value type 'String'."
  },
  {
   "type": "ERROR|STATIC_WARNING|MAP_VALUE_TYPE_NOT_ASSIGNABLE",
   "file": "lib/src/tasks/saucelabs/xml_reporter.dart",
   "line": 27,
   "col": 20,
   "error": "The element type 'int' can't be assigned to the map value type 'String'."
  },
  {
   "type": "ERROR|STATIC_WARNING|MAP_VALUE_TYPE_NOT_ASSIGNABLE",
   "file": "lib/src/tasks/saucelabs/xml_reporter.dart",
   "line": 28,
   "col": 19,
   "error": "The element type 'int' can't be assigned to the map value type 'String'."
  },
  {
   "type": "ERROR|STATIC_WARNING|MAP_VALUE_TYPE_NOT_ASSIGNABLE",
   "file": "lib/src/tasks/saucelabs/xml_reporter.dart",
   "line": 32,
   "col": 21,
   "error": "The element type 'int' can't be assigned to the map value type 'String'."
  },
  {
   "type": "ERROR|STATIC_WARNING|MAP_VALUE_TYPE_NOT_ASSIGNABLE",
   "file": "lib/src/tasks/saucelabs/xml_reporter.dart",
   "line": 50,
   "col": 20,
   "error": "The element type 'int' can't be assigned to the map value type 'String'."
  },
  {
   "type": "ERROR|STATIC_WARNING|MAP_VALUE_TYPE_NOT_ASSIGNABLE",
   "file": "lib/src/tasks/saucelabs/xml_reporter.dart",
   "line": 81,
   "col": 21,
   "error": "The element type 'int' can't be assigned to the map value type 'String'."
  },
  {
   "type": "ERROR|STATIC_WARNING|ARGUMENT_TYPE_NOT_ASSIGNABLE",
   "file": "lib/src/tasks/serve/api.dart",
   "line": 33,
   "col": 25,
   "error": "The argument type 'List' can't be assigned to the parameter type 'Iterable<String>'."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE",
   "file": "lib/src/tasks/task_runner/api.dart",
   "line": 17,
   "col": 3,
   "error": "Invalid override. The type of 'TaskRunner.done' ('() → Future<dynamic>') isn't a subtype of 'Task.done' ('() → Future<TaskResult>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE",
   "file": "lib/src/tasks/test/api.dart",
   "line": 79,
   "col": 3,
   "error": "Invalid override. The type of 'TestTask.done' ('() → Future<dynamic>') isn't a subtype of 'Task.done' ('() → Future<TaskResult>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|URI_DOES_NOT_EXIST",
   "file": "test_fixtures/analyze/errors/lib/errors.dart",
   "line": 3,
   "col": 8,
   "error": "Target of URI doesn't exist: 'package:nonexistant/nonexistant.dart'."
  },
  {
   "type": "ERROR|STATIC_WARNING|UNDEFINED_CLASS",
   "file": "test_fixtures/analyze/errors/lib/errors.dart",
   "line": 6,
   "col": 3,
   "error": "Undefined class 'UnknownClass'."
  },
  {
   "type": "INFO|HINT|UNUSED_IMPORT",
   "file": "test_fixtures/analyze/hints/lib/hints.dart",
   "line": 3,
   "col": 8,
   "error": "Unused import."
  },
  {
   "type": "INFO|HINT|UNUSED_LOCAL_VARIABLE",
   "file": "test_fixtures/analyze/hints/lib/hints.dart",
   "line": 6,
   "col": 7,
   "error": "The value of the local variable 'unused' isn't used."
  },
  {
   "type": "ERROR|STATIC_TYPE_WARNING|INCONSISTENT_METHOD_INHERITANCE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 7,
   "error": "Inconsistent declarations of 'firstWhere' are inherited from ((int) → bool, {orElse: () → int}) → int, ((dynamic) → bool, {orElse: () → dynamic}) → dynamic."
  },
  {
   "type": "ERROR|STATIC_TYPE_WARNING|INCONSISTENT_METHOD_INHERITANCE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 7,
   "error": "Inconsistent declarations of 'lastWhere' are inherited from ((int) → bool, {orElse: () → int}) → int, ((dynamic) → bool, {orElse: () → dynamic}) → dynamic."
  },
  {
   "type": "ERROR|STATIC_TYPE_WARNING|INCONSISTENT_METHOD_INHERITANCE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 7,
   "error": "Inconsistent declarations of 'reduce' are inherited from ((int, int) → int) → int, ((dynamic, dynamic) → dynamic) → dynamic."
  },
  {
   "type": "ERROR|STATIC_TYPE_WARNING|INCONSISTENT_METHOD_INHERITANCE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 7,
   "error": "Inconsistent declarations of 'singleWhere' are inherited from ((int) → bool) → int, ((dynamic) → bool) → dynamic."
  },
  {
   "type": "ERROR|STATIC_TYPE_WARNING|INCONSISTENT_METHOD_INHERITANCE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 7,
   "error": "Inconsistent declarations of 'skipWhile' are inherited from ((int) → bool) → Iterable<int>, ((dynamic) → bool) → Iterable<dynamic>."
  },
  {
   "type": "ERROR|STATIC_TYPE_WARNING|INCONSISTENT_METHOD_INHERITANCE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 7,
   "error": "Inconsistent declarations of 'takeWhile' are inherited from ((int) → bool) → Iterable<int>, ((dynamic) → bool) → Iterable<dynamic>."
  },
  {
   "type": "ERROR|STATIC_TYPE_WARNING|INCONSISTENT_METHOD_INHERITANCE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 7,
   "error": "Inconsistent declarations of 'where' are inherited from ((int) → bool) → Iterable<int>, ((dynamic) → bool) → Iterable<dynamic>."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.add' ('(int) → void') isn't a subtype of 'List<dynamic>.add' ('(dynamic) → void')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.addAll' ('(Iterable<int>) → void') isn't a subtype of 'List<dynamic>.addAll' ('(Iterable<dynamic>) → void')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.any' ('((int) → bool) → bool') isn't a subtype of 'Iterable<dynamic>.any' ('((dynamic) → bool) → bool')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.every' ('((int) → bool) → bool') isn't a subtype of 'Iterable<dynamic>.every' ('((dynamic) → bool) → bool')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.expand' ('<T>((int) → Iterable<T>) → Iterable<T>') isn't a subtype of 'Iterable<dynamic>.expand' ('<T>((dynamic) → Iterable<T>) → Iterable<T>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.fillRange' ('(int, int, [int]) → void') isn't a subtype of 'List<dynamic>.fillRange' ('(int, int, [dynamic]) → void')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.firstWhere' ('((int) → bool, {orElse: () → int}) → int') isn't a subtype of 'Iterable<dynamic>.firstWhere' ('((dynamic) → bool, {orElse: () → dynamic}) → dynamic')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.fold' ('<T>(T, (T, int) → T) → T') isn't a subtype of 'Iterable<dynamic>.fold' ('<T>(T, (T, dynamic) → T) → T')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.forEach' ('((int) → void) → void') isn't a subtype of 'Iterable<dynamic>.forEach' ('((dynamic) → void) → void')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.insert' ('(int, int) → void') isn't a subtype of 'List<dynamic>.insert' ('(int, dynamic) → void')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.insertAll' ('(int, Iterable<int>) → void') isn't a subtype of 'List<dynamic>.insertAll' ('(int, Iterable<dynamic>) → void')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.lastWhere' ('((int) → bool, {orElse: () → int}) → int') isn't a subtype of 'Iterable<dynamic>.lastWhere' ('((dynamic) → bool, {orElse: () → dynamic}) → dynamic')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.map' ('<T>((int) → T) → Iterable<T>') isn't a subtype of 'Iterable<dynamic>.map' ('<T>((dynamic) → T) → Iterable<T>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.reduce' ('((int, int) → int) → int') isn't a subtype of 'Iterable<dynamic>.reduce' ('((dynamic, dynamic) → dynamic) → dynamic')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.removeWhere' ('((int) → bool) → void') isn't a subtype of 'List<dynamic>.removeWhere' ('((dynamic) → bool) → void')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.replaceRange' ('(int, int, Iterable<int>) → void') isn't a subtype of 'List<dynamic>.replaceRange' ('(int, int, Iterable<dynamic>) → void')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.retainWhere' ('((int) → bool) → void') isn't a subtype of 'List<dynamic>.retainWhere' ('((dynamic) → bool) → void')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.setAll' ('(int, Iterable<int>) → void') isn't a subtype of 'List<dynamic>.setAll' ('(int, Iterable<dynamic>) → void')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.setRange' ('(int, int, Iterable<int>, [int]) → void') isn't a subtype of 'List<dynamic>.setRange' ('(int, int, Iterable<dynamic>, [int]) → void')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.singleWhere' ('((int) → bool) → int') isn't a subtype of 'Iterable<dynamic>.singleWhere' ('((dynamic) → bool) → dynamic')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.skipWhile' ('((int) → bool) → Iterable<int>') isn't a subtype of 'Iterable<dynamic>.skipWhile' ('((dynamic) → bool) → Iterable<dynamic>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.sort' ('([(int, int) → int]) → void') isn't a subtype of 'List<dynamic>.sort' ('([(dynamic, dynamic) → int]) → void')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.takeWhile' ('((int) → bool) → Iterable<int>') isn't a subtype of 'Iterable<dynamic>.takeWhile' ('((dynamic) → bool) → Iterable<dynamic>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE_FROM_BASE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 5,
   "col": 14,
   "error": "Base class introduces an invalid override. The type of 'ListMixin.where' ('((int) → bool) → Iterable<int>') isn't a subtype of 'Iterable<dynamic>.where' ('((dynamic) → bool) → Iterable<dynamic>')."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|STRONG_MODE_INVALID_METHOD_OVERRIDE",
   "file": "test_fixtures/analyze/strong/lib/strong.dart",
   "line": 6,
   "col": 4,
   "error": "Invalid override. The type of 'MyList.length' ('() → Object') isn't a subtype of 'List<dynamic>.length' ('() → int')."
  },
  {
   "type": "ERROR|STATIC_WARNING|EXTRA_POSITIONAL_ARGUMENTS",
   "file": "test_fixtures/analyze/warnings/lib/warnings.dart",
   "line": 8,
   "col": 18,
   "error": "Too many positional arguments: 1 expected, but 2 found."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|URI_DOES_NOT_EXIST",
   "file": "test_fixtures/coverage/browser/test/browser_custom_test.dart",
   "line": 6,
   "col": 8,
   "error": "Target of URI doesn't exist: 'package:coverage_browser/coverage_browser.dart'."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|URI_DOES_NOT_EXIST",
   "file": "test_fixtures/coverage/browser/test/browser_test.dart",
   "line": 4,
   "col": 8,
   "error": "Target of URI doesn't exist: 'package:coverage_browser/coverage_browser.dart'."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|URI_DOES_NOT_EXIST",
   "file": "test_fixtures/coverage/browser_needs_pub_serve/test/browser_custom_test.dart",
   "line": 6,
   "col": 8,
   "error": "Target of URI doesn't exist: 'package:coverage_browser_needs_pub_serve/coverage_browser.dart'."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|URI_DOES_NOT_EXIST",
   "file": "test_fixtures/coverage/browser_needs_pub_serve/test/browser_test.dart",
   "line": 4,
   "col": 8,
   "error": "Target of URI doesn't exist: 'package:coverage_browser_needs_pub_serve/coverage_browser.dart'."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|URI_DOES_NOT_EXIST",
   "file": "test_fixtures/coverage/failing_test/test/failing_test.dart",
   "line": 4,
   "col": 8,
   "error": "Target of URI doesn't exist: 'package:coverage_failing_test/coverage_failing_test.dart'."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|URI_DOES_NOT_EXIST",
   "file": "test_fixtures/coverage/failing_test/test/passing_test.dart",
   "line": 4,
   "col": 8,
   "error": "Target of URI doesn't exist: 'package:coverage_failing_test/coverage_failing_test.dart'."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|URI_DOES_NOT_EXIST",
   "file": "test_fixtures/coverage/functional_test/web/index.dart",
   "line": 3,
   "col": 8,
   "error": "Target of URI doesn't exist: 'package:functional_test/lib.dart'."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|URI_DOES_NOT_EXIST",
   "file": "test_fixtures/coverage/non_test_file/test/file.dart",
   "line": 4,
   "col": 8,
   "error": "Target of URI doesn't exist: 'package:non_test_file/non_test_file.dart'."
  },
  {
   "type": "ERROR|COMPILE_TIME_ERROR|URI_DOES_NOT_EXIST",
   "file": "test_fixtures/coverage/vm/test/vm_test.dart",
   "line": 4,
   "col": 8,
   "error": "Target of URI doesn't exist: 'package:coverage_vm/coverage_vm.dart'."
  },
  {
   "type": "ERROR|STATIC_WARNING|UNDEFINED_IDENTIFIER",
   "file": "test_fixtures/gen_test_runner/check_fail/test/generated_runner.dart",
   "line": 9,
   "col": 3,
   "error": "Undefined name 'test_that_should_be_removed'."
  },
  {
   "type": "INFO|HINT|UNUSED_SHOWN_NAME",
   "file": "test_fixtures/gen_test_runner/check_fail/tool/dev.dart",
   "line": 3,
   "col": 51,
   "error": "The name config is shown, but not used."
  },
  {
   "type": "INFO|HINT|UNUSED_IMPORT",
   "file": "test_fixtures/gen_test_runner/check_fail/tool/dev.dart",
   "line": 4,
   "col": 8,
   "error": "Unused import."
  },
  {
   "type": "INFO|HINT|UNUSED_SHOWN_NAME",
   "file": "test_fixtures/gen_test_runner/default_config/tool/dev.dart",
   "line": 3,
   "col": 51,
   "error": "The name config is shown, but not used."
  },
  {
   "type": "INFO|HINT|UNUSED_IMPORT",
   "file": "test_fixtures/gen_test_runner/default_config/tool/dev.dart",
   "line": 4,
   "col": 8,
   "error": "Unused import."
  },
  {
   "type": "INFO|HINT|UNUSED_SHOWN_NAME",
   "file": "test_fixtures/task_runner/failing_tasks/tool/dev.dart",
   "line": 3,
   "col": 51,
   "error": "The name config is shown, but not used."
  },
  {
   "type": "INFO|HINT|UNUSED_SHOWN_NAME",
   "file": "test_fixtures/task_runner/passing_tasks/tool/dev.dart",
   "line": 3,
   "col": 51,
   "error": "The name config is shown, but not used."
  }
 ],
 "unformattedFiles": [
  "test/integration/generated_runner.dart",
  "test_fixtures/analyze/hints/lib/hints.dart",
  "test_fixtures/analyze/lints/lib/lints.dart",
  "test_fixtures/analyze/no_issues/bin/executable.dart",
  "test_fixtures/analyze/no_issues/lib/no_issues.dart",
  "test_fixtures/analyze/strong/lib/strong.dart",
  "test_fixtures/analyze/warnings/lib/warnings.dart",
  "test_fixtures/copy_license/has_licenses/example/main.dart",
  "test_fixtures/copy_license/license_with_empty_lines/lib/main.dart",
  "test_fixtures/copy_license/no_licenses/lib/main.dart",
  "test_fixtures/coverage/browser/lib/coverage_browser.dart",
  "test_fixtures/coverage/browser/test/browser_custom_test.dart",
  "test_fixtures/coverage/browser/test/browser_test.dart",
  "test_fixtures/coverage/functional_test/test/functional/simple_test.dart",
  "test_fixtures/coverage/functional_test/tool/dev.dart",
  "test_fixtures/coverage/non_test_file/lib/non_test_file.dart",
  "test_fixtures/coverage/non_test_file/test/file.dart",
  "test_fixtures/coverage/non_test_file/tool/dev.dart",
  "test_fixtures/coverage/vm/lib/coverage_vm.dart",
  "test_fixtures/coverage/vm/test/vm_test.dart",
  "test_fixtures/docs/docs/lib/main.dart",
  "test_fixtures/format/changes_needed/lib/main.dart",
  "test_fixtures/format/exclusions/lib/main.dart",
  "test_fixtures/gen_test_runner/check_fail/test/generated_runner.dart",
  "test_fixtures/gen_test_runner/check_fail/tool/dev.dart",
  "test_fixtures/gen_test_runner/check_pass/test/generated_runner.dart",
  "test_fixtures/gen_test_runner/check_pass/tool/dev.dart",
  "test_fixtures/gen_test_runner/default_config/tool/dev.dart",
  "test_fixtures/init/initialized/tool/dev.dart",
  "test_fixtures/local/good_tasks/tool/dev.dart",
  "test_fixtures/local/no_executable/tool/dev.dart",
  "test_fixtures/local/no_tasks/tool/dev.dart",
  "test_fixtures/task_runner/failing_tasks/lib/main.dart",
  "test_fixtures/task_runner/failing_tasks/test/simple_test.dart",
  "test_fixtures/test/default_unit/lib/passing_unit.dart",
  "test_fixtures/test/default_unit/tool/dev.dart",
  "test_fixtures/test/failing/test/failing_integration_test.dart",
  "test_fixtures/test/failing/test/failing_unit_test.dart",
  "test_fixtures/test/passing/test/passing_integration_test.dart",
  "test_fixtures/test/passing/test/passing_unit_test.dart",
  "test_fixtures/test/passingIntegration/test/failing_unit_test.dart",
  "test_fixtures/test/passingIntegration/test/passing_integration_test.dart"
 ]
}